---------------------------------------------PROGRAM 1A---------------------------------------------
STEP 1:
Open Terminal

STEP 2:
gedit pgm1a.l

STEP 3:
%{
#include<stdio.h>
#include<stdlib.h>
int v=0,op=0,id=0,flag=0;
%}
%%
[0-9]+ {id++; printf("\n Identifier "); ECHO;}
[\+ \*]+ {op++; printf("\n Operator "); ECHO;}
"(" {v++;}
")" {v--;}
";" {flag=0;}
.|\n ;
%%
int main()
{
printf("Enter the arithmetic expression\n");
yylex();
if((op+1)==id && v==0)
{
printf("\n The expression is valid\n");
}
else
{
printf("\n The expression is invalid\n");
}
printf("Number of Identifiers:%d\n",id);
printf("Number of Operators:%d\n",op);
}

STEP 4:
lex pgm1a.l

STEP 5:
cc lex.yy.c -ll

STEP 6:
./a.out 
CTRL+D

VALID EXPRESSION INPUT: 4+5*6
INVALID EXPRESSION INPUT: (4+6

---------------------------------------------PROGRAM 1B---------------------------------------------
STEP 1:
  Open Terminal

STEP 2:
  gedit pgm1b.l

STEP 3:
%{
#include "y.tab.h"
extern yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext); return num;}
[\+\-\*\/] {return yytext[0];}
[)] {return yytext[0];}
[(] {return yytext[0];}
. {;}
\n {return 0;}
%%

STEP 4:
  Open Terminal

STEP 5:
  gedit pgm1b.y

STEP 6:
%{
#include<stdio.h>
#include<stdlib.h>
%}
%token num
%left '+''-'
%left '*''/'
%%
input:exp {printf("%d\n",$$); exit(0);}
exp:exp'+'exp {$$=$1+$3;}
|exp'-'exp{$$=$1-$3;}
|exp'*'exp{$$=$1*$3;}
|exp'/'exp {if($3==0) {printf("Divide by zero error\n"); exit(0);}
else
$$=$1/$3;}
|'('exp')'{$$=$2;}
|num{$$=$1;}
%%
int yyerror()
{
printf("error");
exit(0);
}
int main()
{
printf("Enter an expression:");
yyparse();
}

STEP 7:
  Open Terminal

STEP 8:
  lex pgm1b.l
  yacc -d pgm1b.y

STEP 9:
  cc lex.yy.c -ll
  ./a.out
  CTRL+D

