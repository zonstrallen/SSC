#include <stdio.h> #include <stdlib.h> int main ()
int Max (10] (10], need [101 (101, alloc [10] [101, avail [10], completed [10], safeSequence [10];
int p, r, i, j, process, count;
count =
0;
printf ("Enter the no
of processes
scanf ("8d", &p);
for (i = 0; i< p; it+
completed[i] = 0;
printf ("\n \nEnter the no of resources : scanf ("8d", &r);
printf ("In\nEnter the Max Matrix for each process:");
for (i = 0; i < p; i++)
printf ("InFor process &d :
for (j = 0; j < r; j++)
scanf ("8d", &Max[i] [j]);
i + 1);
printf ("\n \nEnter the allocation for each process : ");
for (i = 0; i < p; it+)
printf ("InFor process °d : ",i + 1);
for (j = 0; j < r; j++)
scanf ("8d", salloc[i][j]);
printf ("\n \nEnter the Available Resources : ");
for (i= 0; i < r; it+)
scanf ("8d", savail [i]);
for (i = 0; i < p; it+)
for (j = O; j < r; j++)
need [i][il = Max [i][il - alloc[i][il;
do
{
printf ("\n Max matrix: \tAllocation matrix: \n");
for (i = 0; i < p; i++)
{
for ( j = 0; j < r; j++)
printf ("sd ", Max[i][j]);
printf ("\tIt");
for ( j = 0; j <r; j++)
printf ("sd ", alloc[i] [j]);
printf ("\n");
}
process = -1;
for (i = 0; i < p; i++)
{
if (completed [il == 0)//if not completed
{
process = i :
for (j = O; j < r; j++)
{
if (avail [j] < need [i] [jl)
{
process = -1;
break;
}
}
}
if(process != -1)
break;
}
if(process != -1)
{
printf ("InProcess °d runs to completion!", process +1);
safeSequence [count] = process
+ 1; countt+;
for (i = 0; i
< r; i++)
{
avail [j] += alloc [process] [j];
alloc [process] [j] = 0;
Max [process] [j] = 0;
completed [process] = 1;
}
}
}
while (count != p && process != -1);
if (count == p)
{
printf ("InThe system is in a safe state!! In");
printf ("Safe Sequence : < "); for ( 1 = 0; i < p; itt)
printf ("'d ",
safeSequence [i]);
printf (">\n");
}
else
printf ("InThe system is in an unsafe state!!");
}
